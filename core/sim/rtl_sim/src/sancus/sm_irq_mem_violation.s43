/*===========================================================================*/
/*                 SM IRQ MEM VIOLATION                                      */
/*---------------------------------------------------------------------------*/
/* Force memory access violations for all 14 pushes by IRQ logic via         */
/* incremental bar secret section alignment vs sp.                           */
/*                                                                           */
/*---------------------------------------------------------------------------*/
/*===========================================================================*/

.include "pmem_defs.asm"
.include "sancus_macros.asm"

.set stack_base, DMEM_240
.set ssa_base, DMEM_260
.set reg_offset, 0x1234
.set clobber_val, 0xf00d
.set tst_val, 0xbabe
.set tst_addr, DMEM_200
.set reti_addr, DMEM_202
.set stack_value, DMEM_204
.set ssa_limit, DMEM_206

.set foo_secret_start, DMEM_262
.set foo_secret_end, DMEM_26E
.set foo_ssa_loc,(foo_secret_end - 2)
.set foo_ssa, (ssa_base)
.set foo_cntr, (foo_secret_end - 6)
.set bar_secret_start, DMEM_208

.macro init_stack
    mov &stack_value, r1
    repeat clr, &0x260, &0x25e, &0x25c, &0x25a, &0x258, &0x256, &0x254, &0x252
    repeat clr, &0x250, &0x24e, &0x24c, &0x24a, &0x248, &0x246, &0x244, &0x242
    eint
.endm

.global main

main:
    disable_wdt
    clr &foo_cntr
    clr &tst_addr
    init_stack
    
    ; we first perform the test on an _unprotected_ sancus module
    mov #foo_ssa+2, &stack_value
    mov #8, &ssa_limit
    br #foo_public_start

cont_test:
    mov #stack_base, &stack_value
    mov #34, &ssa_limit
    clr &foo_cntr
    sancus_enable #1234, #foo_public_start, #foo_public_end, #foo_secret_start, #foo_secret_end
    br #foo_public_start

    /* ----------------------         END OF TEST        --------------- */
end_of_test:
	mov #0x2000, r15
	br #0xffff

    /* ----------------------         SANCUS MODULE      --------------- */
foo_public_start:
    mov #foo_ssa, &foo_ssa_loc

    mov &stack_value, r1         
    mov #ssa_base+2-1, r15
    mov &foo_cntr, r14
    sub r14, r15
    add #2, r14
    cmp &ssa_limit, r14
    jl 1f

    ; redo the tests for an protected SM, or exit
    mov #foo_public_start, r15
    sancus_get_id
    tst r15
    jz  cont_test
    jmp end_of_test

1:  mov r14, &foo_cntr
    ; wrap bar secret section around non-stack memory
    ; NOTE: text section cleared on sancus_disable; explicitly initialize again
    mov &bar_start, &bar_public_start
    mov &bar_start+2, &bar_public_start+2
    sancus_enable #1234, #bar_public_start, #bar_public_end, #bar_secret_start, r15
    
    ; initialize registers with known values
    mov #reg_offset+0x4, r4
    mov #reg_offset+0x5, r5
    mov #reg_offset+0x6, r6
    mov #reg_offset+0x7, r7
    mov #reg_offset+0x8, r8
    mov #reg_offset+0x9, r9
    mov #reg_offset+0xa, r10
    mov #reg_offset+0xb, r11
    mov #reg_offset+0xc, r12
    mov #reg_offset+0xd, r13
    mov #reg_offset+0xe, r14
    mov #reg_offset+0xf, r15
    
    ; wait for the interrupt    
loop:
    nop
    jmp loop

foo_public_end:

bar_start:
    sancus_disable r4
bar_end:

bar_public_start:
    sancus_disable r4
bar_public_end:

    /* ----------------------      INTERRUPT ROUTINES    --------------- */

IRQ_VECTOR:
    ; dummy instruction with two extension words for testing purposes
    mov #tst_val, &tst_addr
    clr &tst_addr
    ; unprotected reti address ?
    tst r1
    jnz 1f
    mov r15, &reti_addr
    jmp 2f
1:  mov #foo_public_start, &reti_addr
2:  
    ; disable bar module
    mov #1f, r4
    br #bar_public_start
1:  ; re-initialize stack
    init_stack
    repeat_to mov, #clobber_val, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15
    br &reti_addr

    /* ----------------------         INTERRUPT VECTORS  --------------- */

.section .vectors, "a"
.word end_of_test  ; Interrupt  0 (lowest priority)    <unused>
.word end_of_test  ; Interrupt  1                      <unused>
.word end_of_test  ; Interrupt  2                      <unused>
.word end_of_test  ; Interrupt  3                      <unused>
.word end_of_test  ; Interrupt  4                      <unused>
.word end_of_test  ; Interrupt  5                      <unused>
.word end_of_test  ; Interrupt  6                      <unused>
.word end_of_test  ; Interrupt  7                      <unused>
.word end_of_test  ; Interrupt  8                      <unused>
.word IRQ_VECTOR   ; Interrupt  9                      TEST IRQ
.word end_of_test  ; Interrupt 10                      Watchdog timer
.word end_of_test  ; Interrupt 11                      <unused>
.word end_of_test  ; Interrupt 12                      <unused>
.word end_of_test  ; Interrupt 13                      SM_IRQ
.word end_of_test  ; Interrupt 14                      NMI
.word main         ; Interrupt 15 (highest priority)   RESET
